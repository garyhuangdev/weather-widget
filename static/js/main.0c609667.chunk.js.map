{"version":3,"sources":["image/spinner.gif","config/endPoints.js","components/Widget.js","service/helper.js","components/Spinner.js","components/Editor.js","config/constant.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","weatherEndPoint","weatherKey","Widget","props","data","weatherData","title","temperatureType","windDisplay","name","temp","main","icon","weather","speed","wind","iconSource","String","replace","iconConvert","temperature","parseInt","tempConvert","Card","className","Body","Row","Title","Col","xs","Image","src","rounded","Text","Spinner","spinner","style","width","margin","display","alt","Editor","state","isLoading","theme","getWeather","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","axios","get","then","res","setState","localStorage","setItem","JSON","stringify","catch","alert","loadWeather","parse","getItem","this","e","target","value","newTheme","Container","sm","Form","Group","onChange","handleChange","Label","Control","maxLength","type","placeholder","Check","inline","defaultChecked","label","handleSwitch","id","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.0c609667.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.445f76bb.gif\";","export const weatherEndPoint =\n  'https://api.openweathermap.org/data/2.5/weather?';\nexport const weatherImg = 'http://openweathermap.org/img/wn/';\nexport const weatherKey = '482665c9b71591ca13b5f1137df6ac40';\n","import React from 'react';\nimport { Row, Col, Image, Card } from 'react-bootstrap';\nimport { tempConvert, iconConvert } from '../service/helper';\nimport { weatherImg } from '../config/endPoints';\n\nconst Widget = props => {\n  // destructing props\n  let { weatherData, title, temperatureType, windDisplay } = props.data;\n  let {\n    name,\n    main: { temp },\n    weather: [{ icon }],\n    wind: { speed }\n  } = weatherData;\n\n  let iconSource = iconConvert(icon);\n  let temperature = tempConvert(temperatureType, temp);\n\n  return (\n    <Card className=\"shadow rounded mx-auto mx-3 widget-card\">\n      <Card.Body>\n        <Row>\n          <Card.Title className=\"h4 ml-3 font-weight-bold\">\n            {title ? title : 'title of widget'}\n          </Card.Title>\n        </Row>\n        <Row>\n          <Col xs={5}>\n            <Image\n              className=\" widget-card__img mt-3\"\n              src={`${weatherImg}${iconSource}@2x.png`}\n              rounded\n            />\n          </Col>\n          <Col xs={7}>\n            <Card.Text className=\"font-weight-light mt-3 mb-0\">\n              {name}\n            </Card.Text>\n            <Card.Text className=\"font-weight-bolder my-0 widget-card__temperature\">\n              {temperature}\n            </Card.Text>\n            <Card.Text>\n              {windDisplay === 'hide' ? '' : `Wind  ${speed} m/s`}\n            </Card.Text>\n          </Col>\n        </Row>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default Widget;\n","export const tempConvert = (temperatureType, temp) => {\n  let result =\n    temperatureType === 'celsius'\n      ? `${parseInt(temp)} °C`\n      : `${parseInt(temp * 1.8 + 32)} °F`;\n  return result;\n};\n\nexport const iconConvert = icon => {\n  return String(icon).replace('n', 'd');\n};\n","import React from 'react';\nimport spinner from '../image/spinner.gif';\nexport default function Spinner() {\n  return (\n    <>\n      <img\n        src={spinner}\n        style={{\n          width: '200px',\n          margin: 'auto',\n          display: 'block'\n        }}\n        alt=\"Loading...\"\n      />\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport Widget from './Widget';\nimport { Row, Container, Form, Col } from 'react-bootstrap';\nimport Spinner from './Spinner';\nimport axios from 'axios';\nimport { weatherEndPoint, weatherKey } from '../config/endPoints';\nimport { LIGHT_THEME, DARK_THEME } from '../config/constant';\n\nclass Editor extends Component {\n  state = {\n    isLoading: true,\n    theme: LIGHT_THEME,\n    weatherData: '',\n    title: '',\n    temperatureType: 'celsius',\n    windDisplay: 'display'\n  };\n\n  componentDidMount() {\n    // check if the data has been stored before or not\n    const weatherData = JSON.parse(localStorage.getItem('weatherData'));\n    if (!weatherData) this.getWeather();\n    else this.loadWeather(weatherData);\n  }\n\n  // use callback function to fetch weather data based on the former lat/lon\n  getWeather = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        let lat = position.coords.latitude;\n        let lon = position.coords.longitude;\n        axios\n          .get(\n            `${weatherEndPoint}lat=${lat}&lon=${lon}&units=metric&appid=${weatherKey}`\n          )\n          .then(res => {\n            // remove spinner and store into localStorage after fetching\n            this.setState({ weatherData: res.data, isLoading: false });\n            localStorage.setItem('weatherData', JSON.stringify(res.data));\n          })\n          .catch(() => alert('Error fetching new weather'));\n      });\n    } else {\n      alert('Browser does not support Geolocation api');\n    }\n  };\n\n  // get weather from localStorage\n  loadWeather = weatherData => {\n    this.setState({ weatherData: weatherData, isLoading: false });\n  };\n\n  // handle multiple changes based on event name\n  handleChange(e) {\n    let name = e.target.name;\n    this.setState({ [name]: e.target.value });\n  }\n\n  // change theme\n  handleSwitch(e) {\n    let currentTheme = this.state.theme;\n    let newTheme = currentTheme === LIGHT_THEME ? DARK_THEME : LIGHT_THEME;\n    this.setState({ theme: newTheme });\n  }\n\n  render() {\n    return this.state.isLoading ? (\n      <Spinner />\n    ) : (\n      <Container className={`container p-3 m-xs-0 ${this.state.theme}`}>\n        <Row>\n          <Col className=\"col\" xs={12} sm={5}>\n            <Form.Group onChange={e => this.handleChange(e)}>\n              <Form.Label className=\"h3 m-3 font-weight-bold\">Title</Form.Label>\n              <Form.Control\n                name=\"title\"\n                maxLength=\"25\"\n                type=\"text\"\n                placeholder=\"title of widget\"\n              />\n            </Form.Group>\n            <Form.Group className=\"m-3\" onChange={e => this.handleChange(e)}>\n              <Form.Label className=\"font-weight-bold\">Temperature</Form.Label>\n              <Form.Row className=\"ml-2\">\n                <Form.Check\n                  inline\n                  defaultChecked\n                  type=\"radio\"\n                  label=\"C\"\n                  name=\"temperatureType\"\n                  value=\"celsius\"\n                />\n                <Form.Check\n                  inline\n                  type=\"radio\"\n                  label=\"F\"\n                  name=\"temperatureType\"\n                  value=\"fahrenheit\"\n                />\n              </Form.Row>\n            </Form.Group>\n\n            <Form.Group className=\"m-3\" onChange={e => this.handleChange(e)}>\n              <Form.Label className=\"font-weight-bold\">Wind</Form.Label>\n              <Form.Row className=\"ml-2\">\n                <Form.Check\n                  inline\n                  defaultChecked\n                  type=\"radio\"\n                  label=\"On\"\n                  name=\"windDisplay\"\n                  value=\"display\"\n                />\n                <Form.Check\n                  inline\n                  type=\"radio\"\n                  label=\"Off\"\n                  name=\"windDisplay\"\n                  value=\"hide\"\n                />\n              </Form.Row>\n              <Form.Label className=\"font-weight-bold mt-3  \">\n                Light / Dark theme\n              </Form.Label>\n              <Form.Row className=\"ml-2\">\n                <Form.Check\n                  onChange={e => this.handleSwitch(e)}\n                  type=\"switch\"\n                  id=\"theme-switch\"\n                  label=\"\"\n                />\n              </Form.Row>\n            </Form.Group>\n          </Col>\n          <Col xs={12} sm={7} className=\"py-5\">\n            <Widget data={this.state} />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\nexport default Editor;\n","export const LIGHT_THEME = 'light-theme';\nexport const DARK_THEME = 'dark-theme';\n","import React from 'react';\nimport 'normalize.css';\nimport './style/css/style.css';\nimport Editor from './components/Editor';\n\nconst App = () => {\n  return (\n    <div className=\"background\">\n      <Editor />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}